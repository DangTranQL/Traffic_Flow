// Generated by gencpp from file summer_project/limo_info_array.msg
// DO NOT EDIT!


#ifndef SUMMER_PROJECT_MESSAGE_LIMO_INFO_ARRAY_H
#define SUMMER_PROJECT_MESSAGE_LIMO_INFO_ARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <summer_project/limo_info.h>

namespace summer_project
{
template <class ContainerAllocator>
struct limo_info_array_
{
  typedef limo_info_array_<ContainerAllocator> Type;

  limo_info_array_()
    : limo_infos()  {
    }
  limo_info_array_(const ContainerAllocator& _alloc)
    : limo_infos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::summer_project::limo_info_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::summer_project::limo_info_<ContainerAllocator> >> _limo_infos_type;
  _limo_infos_type limo_infos;





  typedef boost::shared_ptr< ::summer_project::limo_info_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::summer_project::limo_info_array_<ContainerAllocator> const> ConstPtr;

}; // struct limo_info_array_

typedef ::summer_project::limo_info_array_<std::allocator<void> > limo_info_array;

typedef boost::shared_ptr< ::summer_project::limo_info_array > limo_info_arrayPtr;
typedef boost::shared_ptr< ::summer_project::limo_info_array const> limo_info_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::summer_project::limo_info_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::summer_project::limo_info_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::summer_project::limo_info_array_<ContainerAllocator1> & lhs, const ::summer_project::limo_info_array_<ContainerAllocator2> & rhs)
{
  return lhs.limo_infos == rhs.limo_infos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::summer_project::limo_info_array_<ContainerAllocator1> & lhs, const ::summer_project::limo_info_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace summer_project

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::summer_project::limo_info_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::summer_project::limo_info_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::summer_project::limo_info_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::summer_project::limo_info_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::summer_project::limo_info_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::summer_project::limo_info_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::summer_project::limo_info_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7a094a2868f4029471366ef4b0b27b1";
  }

  static const char* value(const ::summer_project::limo_info_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7a094a2868f4029ULL;
  static const uint64_t static_value2 = 0x471366ef4b0b27b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::summer_project::limo_info_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "summer_project/limo_info_array";
  }

  static const char* value(const ::summer_project::limo_info_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::summer_project::limo_info_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "limo_info[] limo_infos\n"
"\n"
"================================================================================\n"
"MSG: summer_project/limo_info\n"
"std_msgs/Int64 ID\n"
"std_msgs/Float64 mp_dist\n"
"std_msgs/Float64 origin_dist\n"
"std_msgs/Float64 vel\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::summer_project::limo_info_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::summer_project::limo_info_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.limo_infos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct limo_info_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::summer_project::limo_info_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::summer_project::limo_info_array_<ContainerAllocator>& v)
  {
    s << indent << "limo_infos[]" << std::endl;
    for (size_t i = 0; i < v.limo_infos.size(); ++i)
    {
      s << indent << "  limo_infos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::summer_project::limo_info_<ContainerAllocator> >::stream(s, indent + "    ", v.limo_infos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUMMER_PROJECT_MESSAGE_LIMO_INFO_ARRAY_H
